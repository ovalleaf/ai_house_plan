Creating a full glTF object for a flat floor plan house with two bedrooms involves defining the geometry, materials, and scene structure in JSON format. Below is a simplified example of a glTF object for such a house. This example assumes a very basic layout and does not include textures or advanced materials for simplicity.

```json
{
  "asset": {
    "version": "2.0",
    "generator": "ExampleGenerator"
  },
  "scenes": [
    {
      "nodes": [0]
    }
  ],
  "nodes": [
    {
      "name": "House",
      "children": [1, 2, 3, 4]
    },
    {
      "name": "Floor",
      "mesh": 0
    },
    {
      "name": "Bedroom1",
      "mesh": 1,
      "translation": [0, 0, 0]
    },
    {
      "name": "Bedroom2",
      "mesh": 1,
      "translation": [5, 0, 0]
    },
    {
      "name": "LivingRoom",
      "mesh": 2,
      "translation": [0, 0, 5]
    }
  ],
  "meshes": [
    {
      "name": "FloorMesh",
      "primitives": [
        {
          "attributes": {
            "POSITION": 0
          },
          "indices": 1,
          "material": 0
        }
      ]
    },
    {
      "name": "BedroomMesh",
      "primitives": [
        {
          "attributes": {
            "POSITION": 2
          },
          "indices": 3,
          "material": 1
        }
      ]
    },
    {
      "name": "LivingRoomMesh",
      "primitives": [
        {
          "attributes": {
            "POSITION": 4
          },
          "indices": 5,
          "material": 2
        }
      ]
    }
  ],
  "materials": [
    {
      "name": "FloorMaterial",
      "pbrMetallicRoughness": {
        "baseColorFactor": [0.8, 0.8, 0.8, 1.0],
        "metallicFactor": 0.0,
        "roughnessFactor": 0.9
      }
    },
    {
      "name": "BedroomMaterial",
      "pbrMetallicRoughness": {
        "baseColorFactor": [0.5, 0.5, 0.5, 1.0],
        "metallicFactor": 0.0,
        "roughnessFactor": 0.9
      }
    },
    {
      "name": "LivingRoomMaterial",
      "pbrMetallicRoughness": {
        "baseColorFactor": [0.7, 0.7, 0.7, 1.0],
        "metallicFactor": 0.0,
        "roughnessFactor": 0.9
      }
    }
  ],
  "buffers": [
    {
      "uri": "data:application/octet-stream;base64,AAAA...",
      "byteLength": 1024
    }
  ],
  "bufferViews": [
    {
      "buffer": 0,
      "byteOffset": 0,
      "byteLength": 256
    },
    {
      "buffer": 0,
      "byteOffset": 256,
      "byteLength": 128
    },
    {
      "buffer": 0,
      "byteOffset": 384,
      "byteLength": 256
    },
    {
      "buffer": 0,
      "byteOffset": 640,
      "byteLength": 128
    },
    {
      "buffer": 0,
      "byteOffset": 768,
      "byteLength": 256
    },
    {
      "buffer": 0,
      "byteOffset": 1024,
      "byteLength": 128
    }
  ],
  "accessors": [
    {
      "bufferView": 0,
      "byteOffset": 0,
      "componentType": 5126,
      "count": 4,
      "type": "VEC3",
      "max": [10.0, 0.0, 10.0],
      "min": [0.0, 0.0, 0.0]
    },
    {
      "bufferView": 1,
      "byteOffset": 0,
      "componentType": 5123,
      "count": 6,
      "type": "SCALAR"
    },
    {
      "bufferView": 2,
      "byteOffset": 0,
      "componentType": 5126,
      "count": 4,
      "type": "VEC3",
      "max": [5.0, 0.0, 5.0],
      "min": [0.0, 0.0, 0.0]
    },
    {
      "bufferView": 3,
      "byteOffset": 0,
      "componentType": 5123,
      "count": 6,
      "type": "SCALAR"
    },
    {
      "bufferView": 4,
      "byteOffset": 0,
      "componentType": 5126,
      "count": 4,
      "type": "VEC3",
      "max": [10.0, 0.0, 5.0],
      "min": [0.0, 0.0, 0.0]
    },
    {
      "bufferView": 5,
      "byteOffset": 0,
      "componentType": 5123,
      "count": 6,
      "type": "SCALAR"
    }
  ]
}
```

### Explanation:
1. **Asset**: Metadata about the glTF file.
2. **Scenes**: Defines the scene graph. Here, we have one scene with a root node.
3. **Nodes**: Defines the nodes in the scene graph. Each node can have a transformation and a reference to a mesh.
4. **Meshes**: Defines the geometry of the objects. Each mesh has primitives that reference attributes (like positions) and materials.
5. **Materials**: Defines the appearance of the objects.
6. **Buffers**: Contains the binary data for the geometry.
7. **BufferViews**: Defines sections of the buffer.
8. **Accessors**: Defines how to interpret the buffer data.

This example is highly simplified and assumes the buffer data is already encoded in base64. In a real-world scenario, you would need to generate the actual binary data for the positions and indices of the vertices.